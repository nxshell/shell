{
    "sourceFile": "src/App.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1665214598527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1665214598527,
            "name": "Commit-0",
            "content": "<template>\r\n  <div id=\"app\" class=\"main-window mycolor\">\r\n    <!--  -->\r\n    <pt-window\r\n      :title=\"T('app.powertools-shell')\"\r\n      :isMainWindow=\"true\"\r\n      :leftPanel=\"left_pannel\"\r\n      :topPanel=\"top_pannel\"\r\n    >\r\n      <div slot=\"left-panel\" class=\"control-panel\">\r\n        <pt-shell-app-nav-bar />\r\n      </div>\r\n      <keep-alive slot=\"main-panel\">\r\n        <router-view />\r\n      </keep-alive>\r\n    </pt-window>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapMutations } from \"vuex\";\r\n\r\nimport PtShellAppNavBar from \"./views/Navbar\";\r\nimport Lang from \"../lang\";\r\n\r\nimport * as globalSetting from \"./services/globalSetting\";\r\nimport * as EventBus from \"./services/eventbus\";\r\n\r\nlet localeName = navigator.language;\r\n// let localeName = \"en-US\";\r\nconst defaultLocalName = \"en-US\";\r\n\r\nasync function loadLang(locale) {\r\n  const esModule = await Lang[locale]();\r\n  return esModule.default;\r\n}\r\n\r\nfunction getUserConfigLanguage() {\r\n  let ret = globalSetting.getProfile(\"xterm\");\r\n  if (ret && ret.language) {\r\n    return ret.language;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction getUserConfigTheme() {\r\n  let ret = globalSetting.getProfile(\"xterm\");\r\n  if (ret && ret.theme) {\r\n    return ret.theme;\r\n  } else {\r\n    return \"dark\";\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    PtShellAppNavBar,\r\n  },\r\n  data() {\r\n    return {\r\n      left_pannel: true,\r\n      top_pannel: true,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState([\"configPannel\"]),\r\n  },\r\n\r\n  async created() {\r\n    let _theme = getUserConfigTheme();\r\n    if (_theme === \"light\") {\r\n      window.document.documentElement.setAttribute(\"nx-theme\", \"light\");\r\n    } else {\r\n      window.document.documentElement.setAttribute(\"nx-theme\", \"dark\");\r\n    }\r\n    this.setTheme(_theme);\r\n    let _name = getUserConfigLanguage();\r\n    if (_name) {\r\n      localeName = _name;\r\n    }\r\n    let lang = await loadLang(localeName);\r\n    if (!lang) {\r\n      localeName = defaultLocalName;\r\n      lang = await loadLang(localeName);\r\n    }\r\n    this.locale(localeName, lang);\r\n    this.setLocale(localeName);\r\n    if (process.env.NODE_ENV != \"development\") {\r\n      this.$router.push({\r\n        name: \"Home\",\r\n      });\r\n    }\r\n    console.log(process.env.NODE_ENV);\r\n\r\n    EventBus.subscript(\"enter-fullscreen\", async (action) => {\r\n      try {\r\n        this.left_pannel = false;\r\n        this.top_pannel = false;\r\n        EventBus.publish(\"session-config-pannel\", \"close\");\r\n        await document.body.requestFullscreen();\r\n      } catch (e) {\r\n        // pass\r\n      }\r\n    });\r\n\r\n    document.addEventListener(\"fullscreenchange\", () => {\r\n      let isfullscreen = !!document.fullscreenElement;\r\n      if (!isfullscreen) {\r\n        if (this.configPannel) {\r\n          EventBus.publish(\"session-config-pannel\", \"open\");\r\n        }\r\n        this.left_pannel = true;\r\n        this.top_pannel = true;\r\n      }\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    ...mapMutations([\"setTheme\"]),\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n#app {\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .control-panel {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .main-window {\r\n    .control-panel {\r\n      background-color: var(--primaryColor);\r\n    }\r\n  }\r\n}\r\n</style>\r\n"
        }
    ]
}